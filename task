Iteration 1.

The Replicated Log should have the following deployment architecture: one Master and any number of Secondaries.


Master should expose a simple HTTP server (or alternative service with a similar API) with:
POST method - appends a message into the in-memory list
GET method - returns all messages from the in-memory list

Secondary should expose a simple  HTTP server(or alternative service with a similar API)  with:
GET method - returns all replicated messages from the in-memory list

Properties and assumptions:
after each POST request, the message should be replicated on every Secondary server
Master should ensure that Secondaries have received a message via ACK
Master’s POST request should be finished only after receiving ACKs from all Secondaries (blocking replication approach)
to test that the replication is blocking, introduce the delay/sleep on the Secondary
at this stage assume that the communication channel is a perfect link (no failures and messages lost)
any RPC framework can be used for Master-Secondary communication (Sockets, language-specific RPC, HTTP, Rest, gRPC, …)
your implementation should support logging
Master and Secondaries should run in Docker
